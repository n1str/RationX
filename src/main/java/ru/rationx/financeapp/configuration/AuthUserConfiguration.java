package ru.rationx.financeapp.configuration;

import jakarta.servlet.http.HttpServletResponse;
import lombok.RequiredArgsConstructor;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.csrf.CookieCsrfTokenRepository;
import ru.rationx.financeapp.exceptions.CustomAuthenticationFailureHandler;
import ru.rationx.financeapp.services.AuthUserService;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;


/**
 * –≠—Ç–æ—Ç –∫–ª–∞—Å—Å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.
 * –ó–¥–µ—Å—å –æ–ø–∏—Å–∞–Ω–æ, –∫—Ç–æ –∏ –∫–∞–∫ –º–æ–∂–µ—Ç –∑–∞—Ö–æ–¥–∏—Ç—å –Ω–∞ —Ä–∞–∑–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –∫–∞–∫ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤—Ö–æ–¥/–≤—ã—Ö–æ–¥ –∏ –∫–∞–∫ —à–∏—Ñ—Ä—É—é—Ç—Å—è –ø–∞—Ä–æ–ª–∏.
 */
@Configuration
@RequiredArgsConstructor
public class AuthUserConfiguration {

    private final JwtAuthFilter jwtAuthFilter;


    // –°–µ—Ä–≤–∏—Å, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Ä–∞–±–æ—Ç—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (–ø–æ–∏—Å–∫, –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è –∏ —Ç.–¥.)
    private final AuthUserService userService;

    /**
     * –û—Å–Ω–æ–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
     * –ó–¥–µ—Å—å —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è, –∫–∞–∫–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ–º, –∞ –∫–∞–∫–∏–µ ‚Äî —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º.
     * –¢–∞–∫–∂–µ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞ –≤—Ö–æ–¥–∞, –≤—ã—Ö–æ–¥ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤—Ö–æ–¥–∞.
     */
    @Bean
    public SecurityFilterChain appSecurityConfiguration(HttpSecurity http) throws Exception {
        http.userDetailsService(userService);

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º CSRF –∑–∞—â–∏—Ç—É —á–µ—Ä–µ–∑ –∫—É–∫–∏ –∏ –æ—Ç–∫–ª—é—á–∞–µ–º –µ—ë –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
        http.csrf(csrf -> csrf
                .csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse())
                .ignoringRequestMatchers("/api/**") // –û—Ç–∫–ª—é—á–∞–µ–º CSRF –¥–ª—è API
        );

        http.authorizeHttpRequests(
        auth -> auth
                .requestMatchers("/css/**", "/js/**", "/img/**").permitAll()
                .requestMatchers("/login", "/register").permitAll()
                .requestMatchers("/api/auth/**").permitAll()
                .requestMatchers("/api/**").authenticated()
                .anyRequest().authenticated()
                )
        .formLogin(form -> form
            .usernameParameter("username")
            .passwordParameter("password")
            .loginPage("/login")
            .defaultSuccessUrl("/", true)
            // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –≤–æ–π—Ç–∏ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–≤–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
            .failureHandler(new CustomAuthenticationFailureHandler())
            .permitAll()
        )

        .exceptionHandling(ex -> ex
                .authenticationEntryPoint((request, response, authException) -> {
                    // üîí –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –∫ API ‚Äî –æ—Ç–¥–∞–µ–º 401 –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞
                    if (request.getRequestURI().startsWith("/api")) {
                        response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
                        response.getWriter().write("Unauthorized: Invalid or missing JWT");
                    } else {
                        // üîÑ –∏–Ω–∞—á–µ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏–º –∫–∞–∫ –æ–±—ã—á–Ω–æ
                        response.sendRedirect("/login");
                    }
                })
        )

        .logout(logout -> logout
            .logoutUrl("/logout") // URL –≤—ã—Ö–æ–¥–∞
            .logoutSuccessUrl("/login") // –ö—É–¥–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞
            .permitAll()
            .invalidateHttpSession(true) // –°—Ä–∞–∑—É "–∑–∞–±—ã–≤–∞–µ–º" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            .clearAuthentication(true) // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—Ö–æ–¥–µ
        );

        http.addFilterBefore(jwtAuthFilter, UsernamePasswordAuthenticationFilter.class);


        return http.build();
    }

    @Bean
    public AuthenticationManager authenticationManager(AuthenticationConfiguration config) throws Exception {
        return config.getAuthenticationManager();
    }


    /**
     * –ó–¥–µ—Å—å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è —à–∏—Ñ—Ä–æ–≤–∫–∞ –ø–∞—Ä–æ–ª–µ–π.
     * –í—Å–µ –ø–∞—Ä–æ–ª–∏ –≤ –±–∞–∑–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –Ω–µ –≤ —á–∏—Å—Ç–æ–º –≤–∏–¥–µ, –∞ –≤ –≤–∏–¥–µ "–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–∞—à–∏" (bcrypt).
     */

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
}
